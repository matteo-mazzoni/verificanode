<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Dashboard</title>
    <style>
        .movie-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .movie-card {
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 8px;
        }
        .movie-card img {
            width: 100%;
            height: auto;
        }
    </style>
</head>
<body>
    <h1>Benvenuto, <%= username %></h1>

    <section>
        <h3>Cerca Film</h3>
        <input type="text" id="searchInput" placeholder="Cerca un film...">
        <button onclick="searchMovies()">Cerca</button>
        <div id="searchResults" class="movie-grid"></div>
    </section>

    <section>
        <h3> le mie liste </h3>
        <a href="/lists">Vai alle tue liste</a>
    </section>

    <section>
        <h3>Il tuo token JWT</h3>
        <textarea readonly style="width:100%;height:120px;"><%= token %></textarea>
    </section>

    <script>
        let favorites = [];

        async function searchMovies() {
            const query = document.getElementById('searchInput').value;
            const resultsDiv = document.getElementById('searchResults');
            if (!query) return;

            try {
                const response = await fetch(`/search?q=${encodeURIComponent(query)}`);
                const data = await response.json();

                resultsDiv.innerHTML = data.movies.map(movie => {
                    const encoded = encodeURIComponent(JSON.stringify(movie));
                    return `
                        <div class="movie-card">
                            ${movie.poster_path ? `<img src="https://image.tmdb.org/t/p/w500${movie.poster_path}" alt="${movie.title}">` : ''}
                            <h3>${movie.title}</h3>
                            <p>${movie.release_date ? new Date(movie.release_date).getFullYear() : 'N/A'}</p>
                            <p>${movie.overview ? movie.overview.substring(0, 100) + '...' : ''}</p>
                            <button data-movie="${encoded}" onclick="addToFavoritesEncoded(this.dataset.movie)">
                                Aggiungi ai Preferiti
                            </button>
                        </div>
                    `;
                }).join('');
            } catch (error) {
                resultsDiv.innerHTML = '<p>Errore durante la ricerca</p>';
            }
        }

        async function addToFavoritesEncoded(encoded) {
            try {
                // fallback: invia come query string per evitare dipendenza da body parser
                const url = `/favorites/add?movie=${encoded}`;
                const response = await fetch(url, { method: 'GET' });

                if (response.ok) {
                    const movie = JSON.parse(decodeURIComponent(encoded));
                    // evita duplicati in UI
                    if (!favorites.find(m => String(m.id) === String(movie.id))) {
                        favorites.push(movie);
                        updateFavoritesList();
                    }
                } else {
                    const err = await response.json().catch(()=>({}));
                    alert('Errore: ' + (err.error || 'Impossibile aggiungere ai preferiti'));
                }
            } catch (error) {
                alert('Errore durante l\'aggiunta ai preferiti');
            }
        }

        async function updateFavoritesList() {
            const favoritesContainer = document.getElementById('favorites-list');
            if (!favoritesContainer) return;

            if (!favorites || favorites.length === 0) {
                favoritesContainer.innerHTML = '<p>Non hai ancora aggiunto film ai preferiti.</p>';
                return;
            }

            favoritesContainer.innerHTML = favorites.map(movie => `
                <div class="movie-card" data-id="${movie.id}">
                    ${movie.poster_path ? `<img src="https://image.tmdb.org/t/p/w500${movie.poster_path}" alt="${movie.title}" style="width:100%">` : ''}
                    <h4>${movie.title}</h4>
                    <p>${movie.release_date ? new Date(movie.release_date).getFullYear() : 'N/A'}</p>
                    <button onclick="removeFromFavorites('${movie.id}')">Rimuovi</button>
                </div>
            `).join('');
        }

        async function removeFromFavorites(movieId) {
            try {
                const response = await fetch(`/favorites/remove/${encodeURIComponent(movieId)}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    favorites = favorites.filter(m => String(m.id) !== String(movieId));
                    updateFavoritesList();
                } else {
                    alert('Errore durante la rimozione dai preferiti');
                }
            } catch (error) {
                alert('Errore durante la rimozione dai preferiti');
            }
        }

        async function loadFavorites() {
            try {
                const response = await fetch('/favorites');
                const data = await response.json();
                favorites = Array.isArray(data) ? data : [];
                updateFavoritesList();
            } catch (error) {
                console.error('Errore nel caricamento dei preferiti:', error);
            }
        }

        loadFavorites();
    </script>
    <main>
        <!-- Sezione "I miei Preferiti" -->
        <section aria-labelledby="heading-preferiti">
            <h2 id="heading-preferiti">I miei Preferiti</h2>
            <div id="favorites-list" class="movie-grid">
                <!-- I preferiti verranno inseriti qui dinamicamente -->
            </div>
        </section>
    </main>
</body>
</html>
